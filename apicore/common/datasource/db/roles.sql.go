// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getRoleBySlug = `-- name: GetRoleBySlug :one
SELECT id, slug, created_at, created_by, deleted_at, deleted_by, updated_at, updated_by, version FROM roles
WHERE "slug" = $1 AND "deleted_at" IS NULL
LIMIT 1
`

func (q *Queries) GetRoleBySlug(ctx context.Context, slug string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleBySlug, slug)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
	)
	return i, err
}

const insertRole = `-- name: InsertRole :one
INSERT INTO roles (
    "slug",
    "created_at",
    "created_by",
    "deleted_at",
    "deleted_by",
    "updated_at",
    "updated_by",
    "version"
) VALUES (
    $1, $2, $3, NULL, NULL, NULL, NULL, $4
) RETURNING id, slug, created_at, created_by, deleted_at, deleted_by, updated_at, updated_by, version
`

type InsertRoleParams struct {
	Slug      string    `db:"slug" json:"slug"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	CreatedBy uuid.UUID `db:"created_by" json:"created_by"`
	Version   int32     `db:"version" json:"version"`
}

func (q *Queries) InsertRole(ctx context.Context, arg InsertRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, insertRole,
		arg.Slug,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.Version,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
	)
	return i, err
}
