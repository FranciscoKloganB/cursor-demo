// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organisations.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const insertOrganisation = `-- name: InsertOrganisation :one
INSERT INTO organisations (
    "id",
    "name",
    "created_at",
    "created_by",
    "deleted_at",
    "deleted_by",
    "updated_at",
    "updated_by",
    "version"
) VALUES (
    $1, $2, $3, $4, NULL, NULL, NULL, NULL, $5
) RETURNING id, name, created_at, created_by, deleted_at, deleted_by, updated_at, updated_by, version
`

type InsertOrganisationParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	CreatedBy uuid.UUID `db:"created_by" json:"created_by"`
	Version   int32     `db:"version" json:"version"`
}

func (q *Queries) InsertOrganisation(ctx context.Context, arg InsertOrganisationParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, insertOrganisation,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.Version,
	)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
	)
	return i, err
}
