// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_organisation_scopes.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const insertAccountOrganisationScope = `-- name: InsertAccountOrganisationScope :one
INSERT INTO account_organisation_scopes (
    "account_id",
    "organisation_id",
    "scope_id",
    "created_at",
    "created_by",
    "deleted_at",
    "deleted_by",
    "updated_at",
    "updated_by",
    "version"
) VALUES (
    $1, $2, $3, $4, $5, NULL, NULL, NULL, NULL, $6
) RETURNING account_id, organisation_id, scope_id, created_at, created_by, deleted_at, deleted_by, updated_at, updated_by, version
`

type InsertAccountOrganisationScopeParams struct {
	AccountID      uuid.UUID `db:"account_id" json:"account_id"`
	OrganisationID uuid.UUID `db:"organisation_id" json:"organisation_id"`
	ScopeID        int32     `db:"scope_id" json:"scope_id"`
	CreatedAt      time.Time `db:"created_at" json:"created_at"`
	CreatedBy      uuid.UUID `db:"created_by" json:"created_by"`
	Version        int32     `db:"version" json:"version"`
}

func (q *Queries) InsertAccountOrganisationScope(ctx context.Context, arg InsertAccountOrganisationScopeParams) (AccountOrganisationScope, error) {
	row := q.db.QueryRow(ctx, insertAccountOrganisationScope,
		arg.AccountID,
		arg.OrganisationID,
		arg.ScopeID,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.Version,
	)
	var i AccountOrganisationScope
	err := row.Scan(
		&i.AccountID,
		&i.OrganisationID,
		&i.ScopeID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
	)
	return i, err
}
