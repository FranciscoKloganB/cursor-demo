// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts_organisations.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const insertAccountOrganisation = `-- name: InsertAccountOrganisation :one
INSERT INTO accounts_organisations (
    "account_id",
    "organisation_id",
    "created_at",
    "created_by",
    "deleted_at",
    "deleted_by",
    "updated_at",
    "updated_by",
    "version"
) VALUES (
    $1, $2, $3, $4, NULL, NULL, NULL, NULL, $5
) RETURNING account_id, organisation_id, created_at, created_by, deleted_at, deleted_by, updated_at, updated_by, version
`

type InsertAccountOrganisationParams struct {
	AccountID      uuid.UUID `db:"account_id" json:"account_id"`
	OrganisationID uuid.UUID `db:"organisation_id" json:"organisation_id"`
	CreatedAt      time.Time `db:"created_at" json:"created_at"`
	CreatedBy      uuid.UUID `db:"created_by" json:"created_by"`
	Version        int32     `db:"version" json:"version"`
}

func (q *Queries) InsertAccountOrganisation(ctx context.Context, arg InsertAccountOrganisationParams) (AccountsOrganisation, error) {
	row := q.db.QueryRow(ctx, insertAccountOrganisation,
		arg.AccountID,
		arg.OrganisationID,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.Version,
	)
	var i AccountsOrganisation
	err := row.Scan(
		&i.AccountID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
	)
	return i, err
}
