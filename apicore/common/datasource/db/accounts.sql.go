// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const findAccountByEmail = `-- name: FindAccountByEmail :one
SELECT id, email, password_hash, verification_status, created_at, created_by, deleted_at, deleted_by, updated_at, updated_by, version FROM accounts
WHERE "email" = $1 AND "deleted_at" IS NULL
LIMIT 1
`

func (q *Queries) FindAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.VerificationStatus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
	)
	return i, err
}

const findAccountByID = `-- name: FindAccountByID :one
SELECT id, email, password_hash, verification_status, created_at, created_by, deleted_at, deleted_by, updated_at, updated_by, version FROM accounts
WHERE id = $1 AND "deleted_at" IS NULL
LIMIT 1
`

func (q *Queries) FindAccountByID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.VerificationStatus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
	)
	return i, err
}

const insertAccount = `-- name: InsertAccount :one
INSERT INTO accounts (
    "id",
    "email",
    "password_hash",
    "verification_status",
    "created_at",
    "created_by",
    "deleted_at",
    "deleted_by",
    "updated_at",
    "updated_by",
    "version"
) VALUES (
    $1, $2, $3, $4, $5, $6, NULL, NULL, NULL, NULL, $7
) RETURNING id, email, password_hash, verification_status, created_at, created_by, deleted_at, deleted_by, updated_at, updated_by, version
`

type InsertAccountParams struct {
	ID                 uuid.UUID `db:"id" json:"id"`
	Email              string    `db:"email" json:"email"`
	PasswordHash       string    `db:"password_hash" json:"password_hash"`
	VerificationStatus string    `db:"verification_status" json:"verification_status"`
	CreatedAt          time.Time `db:"created_at" json:"created_at"`
	CreatedBy          uuid.UUID `db:"created_by" json:"created_by"`
	Version            int32     `db:"version" json:"version"`
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, insertAccount,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.VerificationStatus,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.Version,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.VerificationStatus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Version,
	)
	return i, err
}
