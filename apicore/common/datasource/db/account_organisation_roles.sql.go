// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_organisation_roles.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const findAccountOrganisationsRoles = `-- name: FindAccountOrganisationsRoles :many
SELECT
    -- Account data
    a.id,
    a.email,
    a.password_hash,
    a.verification_status,
    a.created_at,
    a.created_by,
    a.deleted_at,
    a.deleted_by,
    a.updated_at,
    a.updated_by,
    a.version,
    -- Organisation role data
    aor.organisation_id,
    aor.role_id,
    r.slug as role_slug
FROM
    accounts a
    LEFT JOIN account_organisation_roles aor ON a.id = aor.account_id AND aor.deleted_at IS NULL
    LEFT JOIN roles r ON r.id = aor.role_id AND r.deleted_at IS NULL
WHERE
    a.id = $1
    AND a.deleted_at IS NULL
`

type FindAccountOrganisationsRolesRow struct {
	ID                 uuid.UUID  `db:"id" json:"id"`
	Email              string     `db:"email" json:"email"`
	PasswordHash       string     `db:"password_hash" json:"password_hash"`
	VerificationStatus string     `db:"verification_status" json:"verification_status"`
	CreatedAt          time.Time  `db:"created_at" json:"created_at"`
	CreatedBy          uuid.UUID  `db:"created_by" json:"created_by"`
	DeletedAt          *time.Time `db:"deleted_at" json:"deleted_at"`
	DeletedBy          *uuid.UUID `db:"deleted_by" json:"deleted_by"`
	UpdatedAt          *time.Time `db:"updated_at" json:"updated_at"`
	UpdatedBy          *uuid.UUID `db:"updated_by" json:"updated_by"`
	Version            int32      `db:"version" json:"version"`
	OrganisationID     *uuid.UUID `db:"organisation_id" json:"organisation_id"`
	RoleID             *int32     `db:"role_id" json:"role_id"`
	RoleSlug           *string    `db:"role_slug" json:"role_slug"`
}

func (q *Queries) FindAccountOrganisationsRoles(ctx context.Context, id uuid.UUID) ([]FindAccountOrganisationsRolesRow, error) {
	rows, err := q.db.Query(ctx, findAccountOrganisationsRoles, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAccountOrganisationsRolesRow
	for rows.Next() {
		var i FindAccountOrganisationsRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.VerificationStatus,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.Version,
			&i.OrganisationID,
			&i.RoleID,
			&i.RoleSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAccountOrganisationRole = `-- name: InsertAccountOrganisationRole :exec
INSERT INTO account_organisation_roles (
    "account_id",
    "organisation_id",
    "role_id",
    "created_at",
    "created_by",
    "deleted_at",
    "deleted_by",
    "updated_at",
    "updated_by",
    "version"
) VALUES (
    $1, $2, $3, $4, $5, NULL, NULL, NULL, NULL, $6
)
`

type InsertAccountOrganisationRoleParams struct {
	AccountID      uuid.UUID `db:"account_id" json:"account_id"`
	OrganisationID uuid.UUID `db:"organisation_id" json:"organisation_id"`
	RoleID         int32     `db:"role_id" json:"role_id"`
	CreatedAt      time.Time `db:"created_at" json:"created_at"`
	CreatedBy      uuid.UUID `db:"created_by" json:"created_by"`
	Version        int32     `db:"version" json:"version"`
}

func (q *Queries) InsertAccountOrganisationRole(ctx context.Context, arg InsertAccountOrganisationRoleParams) error {
	_, err := q.db.Exec(ctx, insertAccountOrganisationRole,
		arg.AccountID,
		arg.OrganisationID,
		arg.RoleID,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.Version,
	)
	return err
}
